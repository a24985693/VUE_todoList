{"version":3,"file":"js/958.7924e432.js","mappings":"sLACOA,MAAM,qB,GACJA,MAAM,a,sGAFfC,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACEC,EAAAA,EAAAA,IAIM,MAJNC,EAIM,EAHJD,EAAAA,EAAAA,IAEM,MAFNE,EAEM,EADJC,EAAAA,EAAAA,IAAcC,QAGlBD,EAAAA,EAAAA,IAAgBE,IAAA,G,oBCwCjBC,GAOA,MAAO,CAINC,IANDD,EAAMA,GAAO,IAAIE,IAchBC,GAAA,SAA6BC,EAAWC,GACvC,IAAMC,EAAmDN,EAAKO,IAAIH,GAC9DE,EACHA,EAASE,KAAKH,GAEdL,EAAKS,IAAIL,EAAM,CAACC,GAAA,EAWlBK,IAAA,SAA8BN,EAAWC,GACxC,IAAMC,EAAmDN,EAAKO,IAAIH,GAC9DE,IACCD,EACHC,EAASK,OAAOL,EAASM,QAAQP,KAAa,EAAG,GAEjDL,EAAKS,IAAIL,EAAM,MAelBS,KAAA,SAA+BT,EAAWC,GACzC,IAAIC,EAAWN,EAAKO,IAAIH,GACpBE,GACFA,EACCQ,QACAC,KAAI,SAACf,GACLA,EAAQK,EAAA,KAIXC,EAAWN,EAAKO,IAAI,OAElBD,EACCQ,QACAC,KAAI,SAACf,GACLA,EAAQI,EAAMC,EAAA,MCnHpB,MAAMW,EAAUC,IAEhB,Q,UFSA,GACEC,WAAY,CACVC,cAAaA,EAAAA,GAEfC,OAAAA,GACE,MAAO,CACLJ,QAAOA,EAEX,EACAK,OAAAA,GACE,MAAMC,EAAQC,SAASC,OAAOC,QAAQ,kDAAmD,MACzFC,KAAKC,MAAMC,SAASC,QAAQC,OAAOC,cAAgBT,EACnD,MAAMU,EAAM,gCACZN,KAAKC,MAAMpB,IAAIyB,EAAK,CAClBH,QAAS,CACPE,cAAeT,KAGhBW,MAAMC,IACsB,MAAvBA,EAAIC,QAAQC,QACdV,KAAKW,QAAQ7B,KAAK,YACpB,IAED8B,OAAOC,IACqB,MAAvBA,EAAIJ,QAAQC,QACdV,KAAKW,QAAQ7B,KAAK,SACpB,GAEN,G,UGpCF,MAAMgC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://to-do-list/./src/views/Dashboard.vue","webpack://to-do-list/../src/index.ts","webpack://to-do-list/./src/methods/emitter.js","webpack://to-do-list/./src/views/Dashboard.vue?040e"],"sourcesContent":["<template>\n  <div class=\"vh-100 bg-primary\">\n    <div class=\"container\">\n      <router-view/>\n    </div>\n  </div>\n  <ToastMessages/>\n</template>\n\n<script>\nimport emitter from '@/methods/emitter';\nimport ToastMessages from '@/components/ToastMessages.vue';\n\nexport default {\n  components: {\n    ToastMessages,\n  },\n  provide() {\n    return {\n      emitter,\n    };\n  },\n  created() {\n    const token = document.cookie.replace(/(?:(?:^|.*;\\s*)todoToken\\s*=\\s*([^;]*).*$)|^.*$/, '$1');\n    this.$http.defaults.headers.common.Authorization = token;\n    const url = `${process.env.VUE_APP_API}check`;\n    this.$http.get(url, {\n      headers: {\n        Authorization: token,\n      },\n    })\n      .then((res) => {\n        if (res.request.status === 200) {\n          this.$router.push('/todolist');\n        }\n      })\n      .catch((err) => {\n        if (err.request.status === 401) {\n          this.$router.push('/login');\n        }\n      });\n  },\n};\n</script>\n","export type EventType = string | symbol;\n\n// An event handler can take an optional event argument\n// and should not return a value\nexport type Handler<T = unknown> = (event: T) => void;\nexport type WildcardHandler<T = Record<string, unknown>> = (\n\ttype: keyof T,\n\tevent: T[keyof T]\n) => void;\n\n// An array of all currently registered event handlers for a type\nexport type EventHandlerList<T = unknown> = Array<Handler<T>>;\nexport type WildCardEventHandlerList<T = Record<string, unknown>> = Array<\n\tWildcardHandler<T>\n>;\n\n// A map of event types and their corresponding event handlers.\nexport type EventHandlerMap<Events extends Record<EventType, unknown>> = Map<\n\tkeyof Events | '*',\n\tEventHandlerList<Events[keyof Events]> | WildCardEventHandlerList<Events>\n>;\n\nexport interface Emitter<Events extends Record<EventType, unknown>> {\n\tall: EventHandlerMap<Events>;\n\n\ton<Key extends keyof Events>(type: Key, handler: Handler<Events[Key]>): void;\n\ton(type: '*', handler: WildcardHandler<Events>): void;\n\n\toff<Key extends keyof Events>(\n\t\ttype: Key,\n\t\thandler?: Handler<Events[Key]>\n\t): void;\n\toff(type: '*', handler: WildcardHandler<Events>): void;\n\n\temit<Key extends keyof Events>(type: Key, event: Events[Key]): void;\n\temit<Key extends keyof Events>(\n\t\ttype: undefined extends Events[Key] ? Key : never\n\t): void;\n}\n\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\nexport default function mitt<Events extends Record<EventType, unknown>>(\n\tall?: EventHandlerMap<Events>\n): Emitter<Events> {\n\ttype GenericEventHandler =\n\t\t| Handler<Events[keyof Events]>\n\t\t| WildcardHandler<Events>;\n\tall = all || new Map();\n\n\treturn {\n\t\t/**\n\t\t * A Map of event names to registered handler functions.\n\t\t */\n\t\tall,\n\n\t\t/**\n\t\t * Register an event handler for the given type.\n\t\t * @param {string|symbol} type Type of event to listen for, or `'*'` for all events\n\t\t * @param {Function} handler Function to call in response to given event\n\t\t * @memberOf mitt\n\t\t */\n\t\ton<Key extends keyof Events>(type: Key, handler: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\thandlers.push(handler);\n\t\t\t} else {\n\t\t\t\tall!.set(type, [handler] as EventHandlerList<Events[keyof Events]>);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Remove an event handler for the given type.\n\t\t * If `handler` is omitted, all handlers of the given type are removed.\n\t\t * @param {string|symbol} type Type of event to unregister `handler` from (`'*'` to remove a wildcard handler)\n\t\t * @param {Function} [handler] Handler function to remove\n\t\t * @memberOf mitt\n\t\t */\n\t\toff<Key extends keyof Events>(type: Key, handler?: GenericEventHandler) {\n\t\t\tconst handlers: Array<GenericEventHandler> | undefined = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\tif (handler) {\n\t\t\t\t\thandlers.splice(handlers.indexOf(handler) >>> 0, 1);\n\t\t\t\t} else {\n\t\t\t\t\tall!.set(type, []);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Invoke all handlers for the given type.\n\t\t * If present, `'*'` handlers are invoked after type-matched handlers.\n\t\t *\n\t\t * Note: Manually firing '*' handlers is not supported.\n\t\t *\n\t\t * @param {string|symbol} type The event type to invoke\n\t\t * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n\t\t * @memberOf mitt\n\t\t */\n\t\temit<Key extends keyof Events>(type: Key, evt?: Events[Key]) {\n\t\t\tlet handlers = all!.get(type);\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as EventHandlerList<Events[keyof Events]>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(evt!);\n\t\t\t\t\t});\n\t\t\t}\n\n\t\t\thandlers = all!.get('*');\n\t\t\tif (handlers) {\n\t\t\t\t(handlers as WildCardEventHandlerList<Events>)\n\t\t\t\t\t.slice()\n\t\t\t\t\t.map((handler) => {\n\t\t\t\t\t\thandler(type, evt!);\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n","import mitt from 'mitt';\n\nconst emitter = mitt();\n\nexport default emitter;\n","import { render } from \"./Dashboard.vue?vue&type=template&id=409a85a0\"\nimport script from \"./Dashboard.vue?vue&type=script&lang=js\"\nexport * from \"./Dashboard.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","_createElementBlock","_Fragment","_createElementVNode","_hoisted_1","_hoisted_2","_createVNode","_component_router_view","_component_ToastMessages","n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","emitter","mitt","components","ToastMessages","provide","created","token","document","cookie","replace","this","$http","defaults","headers","common","Authorization","url","then","res","request","status","$router","catch","err","__exports__","render"],"sourceRoot":""}